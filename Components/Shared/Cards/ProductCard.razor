@using SubashaVentures.Components.Shared.Buttons
@using SubashaVentures.Domain.Enums

<div class="product-card @CssClass @(IsLoading ? "loading" : "")" 
     @onclick="HandleCardClick"
     @onmouseenter="HandleMouseEnter"
     @onmouseleave="HandleMouseLeave">
    
    <div class="product-image">
        @if (!string.IsNullOrEmpty(ImageUrl))
        {
            <img src="@ImageUrl" alt="@Name" class="product-img" loading="lazy" />
        }
        else
        {
            <div class="product-placeholder">
                @if (!string.IsNullOrEmpty(PlaceholderText))
                {
                    @PlaceholderText
                }
                else
                {
                    @Name
                }
            </div>
        }
        
        @if (ShowBadge && !string.IsNullOrEmpty(Badge))
        {
            <div class="product-badge @BadgeType.ToString().ToLower()">@Badge</div>
        }
        
        <div class="product-overlay @(IsHovered ? "visible" : "")">
            @if (ShowQuickView)
            {
                <PrimaryButton Size="PrimaryButton.ButtonSize.Small" 
                              Variant="PrimaryButton.ButtonVariant.Primary"
                              OnClick="HandleQuickViewClick"
                              class="quick-view-btn">
                    @QuickViewText
                </PrimaryButton>
            }
            
            @if (ShowAddToCart)
            {
                <PrimaryButton Size="PrimaryButton.ButtonSize.Small" 
                              Variant="PrimaryButton.ButtonVariant.Secondary"
                              OnClick="HandleAddToCartClick"
                              IsLoading="IsAddingToCart"
                              class="add-to-cart-btn">
                    @AddToCartText
                </PrimaryButton>
            }
            
            @if (ShowWishlist)
            {
                <button class="wishlist-btn @(IsInWishlist ? "active" : "")"
                        @onclick="HandleWishlistClick"
                        @onclick:stopPropagation="true">
                    @(IsInWishlist ? "‚ù§Ô∏è" : "ü§ç")
                </button>
            }
        </div>
    </div>
    
    <div class="product-info">
        @if (ShowCategory && !string.IsNullOrEmpty(Category))
        {
            <p class="product-category">@Category</p>
        }
        
        <h4 class="product-name" title="@Name">@Name</h4>
        
        @if (!string.IsNullOrEmpty(Description))
        {
            <p class="product-description">@Description</p>
        }
        
        <div class="product-price">
            @if (OriginalPrice.HasValue && OriginalPrice > CurrentPrice)
            {
                <span class="original-price">$@OriginalPrice.Value.ToString("F2")</span>
            }
            <span class="current-price">$@CurrentPrice.ToString("F2")</span>
            @if (DiscountPercentage.HasValue)
            {
                <span class="discount-badge">-@DiscountPercentage%</span>
            }
        </div>
        
        @if (ShowRating && Rating.HasValue)
        {
            <div class="product-rating">
                <div class="rating-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="star @(i <= Rating ? "filled" : "")">‚≠ê</span>
                    }
                </div>
                @if (ReviewCount.HasValue)
                {
                    <span class="rating-text">(@Rating.Value.ToString("F1")) @ReviewCount</span>
                }
            </div>
        }
        
        @if (ShowSizes && Sizes?.Any() == true)
        {
            <div class="product-sizes">
                @foreach (var size in Sizes)
                {
                    <span class="size-option">@size</span>
                }
            </div>
        }
        
        @if (ShowColors && Colors?.Any() == true)
        {
            <div class="product-colors">
                @foreach (var color in Colors)
                {
                    <div class="color-option" style="background-color: @color" title="@color"></div>
                }
            </div>
        }
    </div>
    
    @if (ChildContent != null)
    {
        <div class="product-custom-content">
            @ChildContent
        </div>
    }
</div>

@code {
   
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public string Category { get; set; } = "";
    [Parameter] public decimal CurrentPrice { get; set; }
    [Parameter] public decimal? OriginalPrice { get; set; }
    [Parameter] public int? DiscountPercentage { get; set; }
    [Parameter] public float? Rating { get; set; }
    [Parameter] public int? ReviewCount { get; set; }
    [Parameter] public string ImageUrl { get; set; } = "";
    [Parameter] public string PlaceholderText { get; set; } = "";
    [Parameter] public string Badge { get; set; } = "";
    [Parameter] public BadgeType BadgeType { get; set; } = BadgeType.New;
    [Parameter] public List<string>? Sizes { get; set; }
    [Parameter] public List<string>? Colors { get; set; }
    
    [Parameter] public bool ShowQuickView { get; set; } = true;
    [Parameter] public bool ShowAddToCart { get; set; } = true;
    [Parameter] public bool ShowWishlist { get; set; } = true;
    [Parameter] public bool ShowCategory { get; set; } = true;
    [Parameter] public bool ShowRating { get; set; } = true;
    [Parameter] public bool ShowBadge { get; set; } = true;
    [Parameter] public bool ShowSizes { get; set; } = false;
    [Parameter] public bool ShowColors { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool IsAddingToCart { get; set; } = false;
    [Parameter] public bool IsInWishlist { get; set; } = false;
    
    [Parameter] public string QuickViewText { get; set; } = "üëÅÔ∏è Quick View";
    [Parameter] public string AddToCartText { get; set; } = "üõí Add to Cart";
    
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnQuickView { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnAddToCart { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnWishlistToggle { get; set; }

    private bool IsHovered { get; set; } = false;

    private async Task HandleCardClick(MouseEventArgs e)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(e);
        }
    }

    private async Task HandleQuickViewClick(MouseEventArgs e)
    {
        if (OnQuickView.HasDelegate)
        {
            await OnQuickView.InvokeAsync(e);
        }
    }

    private async Task HandleAddToCartClick(MouseEventArgs e)
    {
        if (OnAddToCart.HasDelegate)
        {
            await OnAddToCart.InvokeAsync(e);
        }
    }

    private async Task HandleWishlistClick(MouseEventArgs e)
    {
        if (OnWishlistToggle.HasDelegate)
        {
            await OnWishlistToggle.InvokeAsync(e);
        }
    }

    private void HandleMouseEnter(MouseEventArgs e)
    {
        IsHovered = true;
    }

    private void HandleMouseLeave(MouseEventArgs e)
    {
        IsHovered = false;
    }

}