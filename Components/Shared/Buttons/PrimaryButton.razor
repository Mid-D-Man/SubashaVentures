@* PrimaryButton.razor - Fixed with CssClass parameter *@
<button class="primary-button @CssClass @SizeClass @VariantClass" 
        type="@ButtonType" 
        disabled="@IsDisabled"
        @onclick="HandleClick"
        @onclick:stopPropagation="@StopPropagation"
        @attributes="AdditionalAttributes">
    
    @if (IsLoading)
    {
        <span class="button-spinner"></span>
    }
    
    @if (!string.IsNullOrEmpty(Icon) && IconPosition == ButtonIconPosition.Left)
    {
        <span class="button-icon icon-left">@Icon</span>
    }
    
    <span class="button-content @(IsLoading ? "loading" : "")">
        @ChildContent
    </span>
    
    @if (!string.IsNullOrEmpty(Icon) && IconPosition == ButtonIconPosition.Right)
    {
        <span class="button-icon icon-right">@Icon</span>
    }
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter] public string ButtonType { get; set; } = "button";
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public ButtonIconPosition IconPosition { get; set; } = ButtonIconPosition.Left;
    [Parameter] public bool StopPropagation { get; set; } = false;
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    // This allows additional HTML attributes to be passed through
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string SizeClass => Size switch
    {
        ButtonSize.ExtraSmall => "btn-xs",
        ButtonSize.Small => "btn-sm",
        ButtonSize.Medium => "btn-md",
        ButtonSize.Large => "btn-lg",
        ButtonSize.ExtraLarge => "btn-xl",
        _ => "btn-md"
    };

    private string VariantClass => Variant switch
    {
        ButtonVariant.Primary => "btn-primary",
        ButtonVariant.Secondary => "btn-secondary",
        ButtonVariant.Outline => "btn-outline",
        ButtonVariant.Ghost => "btn-ghost",
        ButtonVariant.Link => "btn-link",
        _ => "btn-primary"
    };

    private async Task HandleClick(MouseEventArgs e)
    {
        if (!IsDisabled && !IsLoading && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(e);
        }
    }

    public enum ButtonSize
    {
        ExtraSmall,
        Small,
        Medium,
        Large,
        ExtraLarge
    }

    public enum ButtonVariant
    {
        Primary,
        Secondary,
        Outline,
        Ghost,
        Link
    }

    public enum ButtonIconPosition
    {
        Left,
        Right
    }
}