@using SubashaVentures.Components.Shared.Buttons
@using SubashaVentures.Components.Shared.Burgers
@inject INavigationService NavService
@implements IDisposable

<div class="top-navigation">
    <!-- Left: Brand Logo  -->
    <div class="nav-left">
        <BrandLogo />
    </div>  

    <!-- Middle: Filler Space -->
    <div class="nav-middle"></div>

    <!-- Right: Search + Burger -->
    <div class="nav-right">
        <!-- Search Bar (Desktop Only) -->
        <div class="nav-search desktop-only">
            <div class="search-container">
                <span class="search-icon">üîç</span>
                <input type="text"
                       class="search-input"
                       placeholder="Search products..."
                       value="@searchQuery"
                       @oninput="HandleSearchInput"
                       @onkeydown="HandleSearchKeyPress" />
                <button class="search-clear @(string.IsNullOrEmpty(searchQuery) ? "hidden" : "")"
                        @onclick="ClearSearch"
                        title="Clear search">
                    ‚úï
                </button>
            </div>
        </div>

        <!-- Burger Menu -->
        <div class="nav-burger">
            <BurgerMenu IsOpen="@isSidePanelOpen" 
                       IsOpenChanged="@HandleBurgerToggle" />
        </div>  
    </div>
</div>

@code {
    private bool isSidePanelOpen = false;
    private string searchQuery = "";

    protected override void OnInitialized()
    {
        // Subscribe to service events
        NavService.SidePanelStateChanged += OnSidePanelStateChanged;
        NavService.SearchQueryChanged += OnSearchQueryChanged;
        
        // Initialize from service
        isSidePanelOpen = NavService.IsSidePanelOpen;
        searchQuery = NavService.SearchQuery;
    }

    private void OnSidePanelStateChanged(object? sender, bool isOpen)
    {
        isSidePanelOpen = isOpen;
        StateHasChanged();
    }

    private void OnSearchQueryChanged(object? sender, string query)
    {
        searchQuery = query;
        StateHasChanged();
    }

    private async Task HandleBurgerToggle(bool isOpen)
    {
        NavService.SetSidePanelState(isOpen);
        await Task.CompletedTask;
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        var query = e.Value?.ToString() ?? "";
        NavService.UpdateSearchQuery(query);
    }

    private void ClearSearch()
    {
        NavService.ClearSearchQuery();
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchQuery))
        {
            // In real app: NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(searchQuery)}");
            Console.WriteLine($"Searching for: {searchQuery}");
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events
        NavService.SidePanelStateChanged -= OnSidePanelStateChanged;
        NavService.SearchQueryChanged -= OnSearchQueryChanged;
    }
}
