


@inherits LayoutComponentBase
@inject INavigationService NavService
@implements IDisposable




<div class="main-layout">
    <!-- Top Section - Navigation (Fixed Header)  -->
    <header class="layout-header">
        <TopNavigation />
    </header>  




    <!-- Main Content Section (Scrollable) -->
    <main class="layout-content">
        <div class="page-content">
            @Body
            
            <!-- Footer Section - Part of page content -->
            <footer class="page-footer">
                <FooterSection />
            </footer>
        </div>
    </main>
    
    <!-- Side Panel Component - Global Level -->
    <SidePanel IsOpen="@isSidePanelOpen"
               IsOpenChanged="@HandleSidePanelToggle"
               SearchQuery="@searchQuery"
               SearchQueryChanged="@OnSearchQueryChanged"
               IsLoggedIn="@isLoggedIn"
               UserName="@userName"
               UserEmail="@userEmail"
               OnActionClick="@HandleActionClick"
               OnNavigate="@HandleNavigate"
               OnSearch="@HandleSearch"/>
</div>




@code {
    private bool isSidePanelOpen = false;
    private string searchQuery = "";
    
    // User state - In real app, this would come from an AuthService
    private bool isLoggedIn = false;
    private string userName = "John Doe";
    private string userEmail = "john.doe@example.com";




    protected override void OnInitialized()
    {
        // Subscribe to navigation service events
        NavService.SidePanelStateChanged += OnSidePanelStateChanged;
        NavService.SearchQueryChanged += OnSearchQueryChangedFromService;
        
        // Initialize state from service
        isSidePanelOpen = NavService.IsSidePanelOpen;
        searchQuery = NavService.SearchQuery;
    }




    private void OnSidePanelStateChanged(object? sender, bool isOpen)
    {
        isSidePanelOpen = isOpen;
        StateHasChanged();
    }




    private void OnSearchQueryChangedFromService(object? sender, string query)
    {
        searchQuery = query;
        StateHasChanged();
    }




    private async Task HandleSidePanelToggle(bool isOpen)
    {
        NavService.SetSidePanelState(isOpen);
        await Task.CompletedTask;
    }




    private async Task OnSearchQueryChanged(string query)
    {
        NavService.UpdateSearchQuery(query);
        await Task.CompletedTask;
    }




    private async Task HandleActionClick(SidePanel.ActionType action)
    {
        switch (action)
        {
            case SidePanel.ActionType.SignIn:
                // Navigate to sign in
                Console.WriteLine("Navigate to: /signin");
                break;
            case SidePanel.ActionType.Register:
                // Navigate to register
                Console.WriteLine("Navigate to: /register");
                break;
            case SidePanel.ActionType.Profile:
                // Navigate to profile
                Console.WriteLine("Navigate to: /profile");
                break;
            case SidePanel.ActionType.Logout:
                await HandleLogout();
                break;
        }
        await Task.CompletedTask;
    }




    private async Task HandleNavigate(string url)
    {
        // In real app: NavigationManager.NavigateTo(url);
        Console.WriteLine($"Navigate to: {url}");
        await Task.CompletedTask;
    }




    private async Task HandleSearch(string query)
    {
        if (!string.IsNullOrWhiteSpace(query))
        {
            // In real app: NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(query)}");
            Console.WriteLine($"Search for: {query}");
        }
        await Task.CompletedTask;
    }




    private async Task HandleLogout()
    {
        isLoggedIn = false;
        userName = "";
        userEmail = "";
        StateHasChanged();
        await Task.CompletedTask;
    }




    public void Dispose()
    {
        // Unsubscribe from events
        NavService.SidePanelStateChanged -= OnSidePanelStateChanged;
        NavService.SearchQueryChanged -= OnSearchQueryChangedFromService;
    }
}
